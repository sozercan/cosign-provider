// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogInfo log info
//
// swagger:model LogInfo
type LogInfo struct {

	// The current hash value stored at the root of the merkle tree
	// Required: true
	// Pattern: ^[0-9a-fA-F]{64}$
	RootHash *string `json:"rootHash"`

	// signed tree head
	// Required: true
	SignedTreeHead *LogInfoSignedTreeHead `json:"signedTreeHead"`

	// The current number of nodes in the merkle tree
	// Required: true
	// Minimum: 1
	TreeSize *int64 `json:"treeSize"`
}

// Validate validates this log info
func (m *LogInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRootHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignedTreeHead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTreeSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogInfo) validateRootHash(formats strfmt.Registry) error {

	if err := validate.Required("rootHash", "body", m.RootHash); err != nil {
		return err
	}

	if err := validate.Pattern("rootHash", "body", *m.RootHash, `^[0-9a-fA-F]{64}$`); err != nil {
		return err
	}

	return nil
}

func (m *LogInfo) validateSignedTreeHead(formats strfmt.Registry) error {

	if err := validate.Required("signedTreeHead", "body", m.SignedTreeHead); err != nil {
		return err
	}

	if m.SignedTreeHead != nil {
		if err := m.SignedTreeHead.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signedTreeHead")
			}
			return err
		}
	}

	return nil
}

func (m *LogInfo) validateTreeSize(formats strfmt.Registry) error {

	if err := validate.Required("treeSize", "body", m.TreeSize); err != nil {
		return err
	}

	if err := validate.MinimumInt("treeSize", "body", *m.TreeSize, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this log info based on the context it is used
func (m *LogInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSignedTreeHead(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogInfo) contextValidateSignedTreeHead(ctx context.Context, formats strfmt.Registry) error {

	if m.SignedTreeHead != nil {
		if err := m.SignedTreeHead.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signedTreeHead")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogInfo) UnmarshalBinary(b []byte) error {
	var res LogInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LogInfoSignedTreeHead The current signed tree head
//
// swagger:model LogInfoSignedTreeHead
type LogInfoSignedTreeHead struct {

	// Key hint
	// Required: true
	// Format: byte
	KeyHint *strfmt.Base64 `json:"keyHint"`

	// Log root
	// Required: true
	// Format: byte
	LogRoot *strfmt.Base64 `json:"logRoot"`

	// Signature for log root
	// Required: true
	// Format: byte
	Signature *strfmt.Base64 `json:"signature"`
}

// Validate validates this log info signed tree head
func (m *LogInfoSignedTreeHead) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyHint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogInfoSignedTreeHead) validateKeyHint(formats strfmt.Registry) error {

	if err := validate.Required("signedTreeHead"+"."+"keyHint", "body", m.KeyHint); err != nil {
		return err
	}

	return nil
}

func (m *LogInfoSignedTreeHead) validateLogRoot(formats strfmt.Registry) error {

	if err := validate.Required("signedTreeHead"+"."+"logRoot", "body", m.LogRoot); err != nil {
		return err
	}

	return nil
}

func (m *LogInfoSignedTreeHead) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signedTreeHead"+"."+"signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this log info signed tree head based on context it is used
func (m *LogInfoSignedTreeHead) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LogInfoSignedTreeHead) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogInfoSignedTreeHead) UnmarshalBinary(b []byte) error {
	var res LogInfoSignedTreeHead
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
